#!/bin/bash

# Establish package installation location
libpath=`whereis PRIESSTESS | cut -f 2 -d ' '`
libpath=${libpath%/PRIESSTESS}
libpath="${libpath}/bin"

#### ARGUMENTS ####
# -----------------------------------------------------------------------------#
# Argument default values
out_dir="."                     # -o
flank5=""                       # -f5
flank3=""                       # -f3
flanks_included="FALSE"		# -flanksIn
temp=37                         # -t
alphs="1,2,3,4,5,6,7"           # -alph
N=1                             # -N
streme_perc=50                  # -stremeP
LR_perc=25                      # -logregP
test_perc=25                    # -testP
min_width=4                     # -minw
max_width=6                     # -maxw
max_motifs=40                   # -maxAmotifs
N_score=4                       # -scoreN
predict_loss=10                 # -predLoss
clean="TRUE"			# -noCleanup

# Read in arguments and save
while test $# -gt 0; do
    case "$1" in
        -h|--help)
            echo "USAGE:"
            echo "  PRIESSTESS -fg foreground_file -bg background_file [OPTIONS]"
            echo ""
            echo "    foreground_file and background_file must contain 1 probe"
            echo "    sequence per line containing only characters A, C, G, U "
            echo "    and N"
            echo "    Files must be either uncompressed or gzipped"
            echo "    To convert a fasta to the correct format use:"
            echo "        awk 'NR%2==0' fasta_file.fa > correct_format.txt"
            echo ""
            echo "OPTIONS:"
            echo "  -h, --help  Print help and exit"
            echo ""
            echo "  -o          Path to existing output directory"
            echo "                A new directory called PRIESSTESS_output"
            echo "                will be created in this directory to hold"
            echo "                output"
            echo "                Default: current directory"
            echo ""
            echo "  -f5         5' constant flanking sequence to be added to"
            echo "                5' end of all probes in fg and bg files"
            echo "                OR if -flanksIn flag is used can also be a"
            echo "                number"
            echo "                Ex: GGAUUGUAACCUAUCUGUA OR 19"
            echo "                Default: None"
            echo ""
            echo "  -f3         3' constant flanking sequence to be added to"
            echo "                3' end of all probes in fg and bg files"
            echo "                OR if -flanksIn flag is used can also be a"
            echo "                number"
            echo "                Ex: GGAUUGUAACCUAUCUGUA OR 19"
            echo "                Default: None"
            echo ""
            echo "  -flanksIn   Indcates that 5' and 3' constant flanking "
            echo "                sequences defined above are included in the"
            echo "                probe sequences (-fg and -bg files)"
            echo "                If the flag is not used, the flanks defined"
            echo "                by -f5 and -f3 will be added by PRIESSTESS"
            echo ""
            echo "  -t          Folding temperature - passed to RNAfold"
            echo "                Default: 37"
            echo ""
            echo "  -alph       Alphabet annotations to use in model"
            echo "                Default: 1,2,3,4,5,6,7"
            echo "                Ex. to use only the 1st & 4th alphabet type:"
            echo "                  1,4"
            echo "                Alphabets annotations:"
            echo "                  1: sequence (4-letter)"
            echo "                  2: sequence-structure (8-letter)"
            echo "                      4-letter sequence X 2-letter structure"
            echo "                  3: sequence-structure (16-letter)"
            echo "                      4-letter sequence X 4-letter structure"
            echo "                  4: sequence-structure (28-letter)"
            echo "                      4-letter sequence X 7-letter structure"
            echo "                  5: structure (2-letter)"
            echo "                  6: structure (4-letter)"
            echo "                  7: structure (7-letter)"
            echo ""
            echo "  -N          The number of probes to use for PRIESSTESS from"
            echo "                each of the -fg and -bg files"
            echo "                This number will be aportioned between train"
            echo "                and test sets"
            echo "                Default: The number of probes in the smaller"
            echo "                         of -fg and -bg files"
            echo ""
            echo "  -stremeP    Percentage of probes to provide to STREME for"
            echo "                enriched motif identification"
            echo "                Default: 50"
            echo ""
            echo "  -logregP    Percentage of probes to use for training of the"
            echo "                logistic regression model"
            echo "                Default: 25"
            echo ""
            echo "  -testingP   Percentage of probes to hold out for testing"
            echo "                Default: 25"
            echo ""
            echo "  -minw       Minimum motif width - passed to STREME"
            echo "                Width should be between 3 and 6"
            echo "                Default: 4"
            echo ""
            echo "  -maxw       Maximum motif width - passed to STREME"
            echo "                Width should be between 6 and 9"
            echo "                Default: 6"
            echo ""
            echo "  -maxAmotifs Maximum number of motifs per alphabet to be"
            echo "                used to train logistic regression models"
            echo "                Should be between 1 and 99"
            echo "                Default: 40"
            echo ""
            echo "  -scoreN     Number of motif hits to sum when scoring"
            echo "                sequences"
            echo "                A value of 1 is equivalent to the max"
            echo "                Default: 4"
            echo ""
            echo "  -predLoss   Loss of predictive power during simplification"
            echo "                of logistic regression model, as percentage"
            echo "                final_AUROC = (initial_AUROC - 0.5)*predLoss + 0.5"
            echo "                Should be between 1 and 99"
            echo "                Default: 10"
            echo ""
            echo "  -noCleanup  Do not remove intermediate files created by"
            echo "                PRIESSTESS"
            echo "                If this flag is not used intermediate files"
            echo "                will be removed after usage"
            echo ""
            exit 0
            ;;
        -fg)
            shift
            if [ ! -f $1 ]; then echo "-fg: file $1 does not exist"; exit 1; fi;
            if [[ $1 =~ \.gz$ ]]; then 
                n=`zcat $1 | grep -v "[ACGUN]*" | wc -l`
                if [[ $n -gt 0 ]]; then
                    echo "-fg: file should only contain: A,C,G,U,N"
                    exit 1
                fi
                n=`zcat $1 | wc -l`
                if [[ $n -lt 1000 ]]; then
                    echo "-fg: file should contain at least 1000 sequences"
                    exit 1
                fi
            else
                n=`grep -v "[ACGUN]*" $1 | wc -l`
                if [[ $n -gt 0 ]]; then
                    echo "-fg: file should only contain: A,C,G,U,N"
                    exit 1
                fi
                n=`cat $1 | wc -l`
                if [[ $n -lt 1000 ]]; then
                    echo "-fg: file should contain at least 1000 sequences"
                    exit 1
                fi
            fi
            fgfile=$1
            shift
            ;;
        -bg)
            shift
            if [ ! -f $1 ]; then echo "-bg: file $1 does not exist"; exit 1; fi;
            if [[ $1 =~ \.gz$ ]]; then 
                n=`zcat $1 | grep -v "[ACGUN]*" | wc -l`
                if [[ $n -gt 0 ]]; then
                    echo "-bg: file can only contain: A,C,G,U,N"
                    exit 1
                fi
                n=`zcat $1 | wc -l`
                if [[ $n -lt 1000 ]]; then
                    echo "-bg: file should contain at least 1000 sequences"
                    exit 1
                fi
            else
                n=`grep -v "[ACGUN]*" $1 | wc -l`
                if [[ $n -gt 0 ]]; then
                    echo "-bg: file can only contain: A,C,G,U,N"
                    exit 1
                fi
                n=`cat $1 | wc -l`
                if [[ $n -lt 1000 ]]; then
                    echo "-bg: file should contain at least 1000 sequences"
                    exit 1
                fi
            fi
            bgfile=$1
            shift
            ;;
        -o)
            shift
            if [ ! -d $1 ]; then
                echo "-o: output directory provided does not exist"
                exit 1
            fi
            out_dir=$1
            shift
            ;; 
        -f5)
            shift
            if [[ ! "$1" =~ ^[ACGU]*$ ]]; then
                if [[ ! "$1" =~ ^[0-9][0-9]*$ ]]; then
                    echo "-f5: 5' flank sequence can only contain: A,C,G,U"
                    echo "     or be a integer" 
                    exit 1
                fi
            fi
            flank5=$1
            shift
            ;;
        -f3)
            shift
            if [[ ! "$1" =~ ^[ACGU]*$ ]]; then
                if [[ ! "$1" =~ ^[0-9][0-9]*$ ]]; then
                    echo "-f3: 3' flank sequence can only contain: A,C,G,U"
                    echo "     or be a integer" 
                    exit 1
                fi
            fi
            flank3=$1
            shift
            ;;
        -flanksIn)
            flanks_included="TRUE"
            shift
            ;;
        -t)
            shift
            if [[ ! "$1" =~ ^[1-9][0-9]*$ ]]; then
                echo "-t: temperature must be int"
                exit 1
            fi
            temp=$1
            shift
            ;;
        -alph)
            shift
            n=`echo $1 | wc -c`
            n=$(( n - 1 ))
            if [[ $n -lt 1 ]]; then 
                echo "-alph: at leaste one alphabet must be chosen"
            fi
            if [[ ! "$1" =~ ^[1,]?[2,]?[3,]?[4,]?[5,]?[6,]?[7,]?$ ]]; then
                echo "-alph: alphabet choice must be in format: 1,2,3,4,5,6,7"
                echo "       Numbers must be in increasing order, comma"
                echo "       separated, without any spaces. Ex. 1,3,6"
                exit 1
	    fi;
	    alph=$1
	    shift
	    ;;
        -N)
            shift
            if [[ ! "$1" =~ ^[1-9][0-9][0-9][0-9][0-9]*$ ]]; then
                echo "-N: The number of probes must be an int > 1000"
                exit 1
            fi
            N=$1
            shift
            ;;
        -stremeP)
            shift
            if [[ ! "$1" =~ ^[1-9][0-9]?$ ]]; then
                echo "-stremeP: % data used for STREME must be int > 0 & < 100"
                exit 1
            fi
            streme_perc=$1
            shift
            ;;
        -logregP)
            shift
            if [[ ! "$1" =~ ^[1-9][0-9]?$ ]]; then
                echo "-logregP: % data used for LR must be int > 0 & < 100"
                exit 1
            fi
            LR_perc=$1
            shift
            ;;
        -testP)
            shift
            if [[ ! "$1" =~ ^[1-9][0-9]?$ ]]; then
                echo "-testeP: % data used for testing must be int > 0 & < 100"
                exit 1
            fi
            test_perc=$1
            shift
            ;;
        -minw)
            shift
            if [[ ! "$1" =~ ^[3-6]$ ]]; then
                echo "-minw: Minimum motif width should be between 3 and 6"
                exit 1
            fi
            min_width=$1
            shift
            ;;
        -maxw)
            shift
            if [[ ! "$1" =~ ^[6-9]$ ]]; then
                echo "-maxw: Maximum motif width should be between 6 and 9"
                exit 1
            fi
            max_width=$1
            shift
            ;;
        -maxAmotifs)
            shift
            if [[ ! "$1" =~ ^[1-9][0-9]?$ ]]; then
                echo "-maxAmotifs: Number of motifs to use in LR model per"
                echo "             alphabet should be between 1 and 99"
                exit 1
            fi
            max_motifs=$1
            shift
            ;;
        -scoreN)
            shift
            if [[ ! "$1" =~ ^[1-5]$ ]]; then
                echo "-scoreN: The number of motifs scores to sum must be"
                echo "           between 1 and 5"
                exit 1
            fi
            N_score=$1
            shift
            ;;
        -predLoss)
            shift
            if [[ ! "$1" =~ ^[1-9][0-9]?$ ]]; then
                echo "-predLoss: The loss of predictive power should be"
                echo "           between 1 and 99"
                exit 1
            fi
            predict_loss=$1
            shift
            ;;
        -noCleanup)
            clean="FALSE"
            shift
            ;;
        *)
            echo "$1 is not a valid argument"
            exit 1
              ;;
    esac
done            

## Further argument checks

# Ensure that fgfile and bgfile are defined
if [ -z $fgfile ]; then 
    echo "-fg: No foreground file was provided"
    exit 1
fi;
if [ -z $bgfile ]; then 
    echo "-bg: No background file was provided"
    exit 1
fi;

# Ensure percentages for STREME, LR, test sets don't add up to > 100
n=$(( streme_perc + LR_perc + test_perc ))
if [[ $n -gt 100 ]]; then
    echo "-stremeP, -logregP, -testP: The percentage of probes to use for "
    echo "                            STREME, logistic regression and testing"
    echo "                            must add up to 100 or less"
    exit 1
fi;    

# Ensure that if user indicates flanks are included that they
# defined the flanks
if [[ "$flanks_included" == "TRUE" ]]; then
    if [[ "$flank5" == "" || "$flank3" == "" ]]; then
        echo "-flanksIn: If the -flanksIn flag is used -f5 and -f3 must also"
        echo "           be supplied and not be empty strings"
        echo "           Sequences or lengths (integers) can be supplied"
        echo "           If it is your intention to retain the flanks in motif"
        echo "           identification and logistic regression - use none of"
        echo "           the three flags"
        exit 1
    fi
else
    if [[ "$flank5" =~ ^[0-9][0-9]*$ || "$flank3" =~ ^[0-9][0-9]*$ ]]; then
        echo "-f5, -f3: If the -flanksIn flag is NOT used, -f5 and -f3 must"
        echo "          be sequences not integers" 
    fi
fi

# Ensure that the nubmer of probes to use is not greater
# than the number of lines in the smaller of the bg and fg file
n=1000000000
for f in $fgfile $bgfile; do
    if [[ $f =~ \.gz$ ]]; then
        n1=`zcat $f | wc -l` 
    else
        n1=`cat $f | wc -l`
    fi
    if [[ $n1 -lt $n ]]; then
        n=$n1
    fi
done
if [[ $n -lt $N ]]; then
    echo "-N: The number of probes to use for the foreground and"
    echo "    background sets must not be greater the number of "
    echo "    probes in the smaller of the two files"
    exit 1
fi

# -----------------------------------------------------------------------------#

#### DATA SET UP ####
# -----------------------------------------------------------------------------#
# Remove trailing slash from out_dir if exists
out_dir=${out_dir%/}
# Ensure there is not already a PRIESSTESS_output directory
out_dir="${out_dir}/PRIESSTESS_output"
if [ -d $out_dir ]; then
    echo "A directory named PRIESSTESS_output already exists"
    echo "in the provided output directory"
    exit 1
fi;
# Create output directory
mkdir $out_dir
if [ ! -d $out_dir ]; then
    echo "Failed to create output directory"
    exit 1
fi
 
# Retrieve foreground & background files
# Remove sequences containing "N"s 
# Save sequences in files called fg_seqs.txt and bg_seqs.txt
# Files are assumed to be gzipped or uncompressed
if [[ $fgfile =~ \.gz$ ]]; then 
    zcat $fgfile | grep -v "N" > ${out_dir}/fg_seqs.txt
else
    grep -v "N" $fgfile > ${out_dir}/fg_seqs.txt
fi;

if [[ $bgfile =~ \.gz$ ]]; then 
    zcat $bgfile | grep -v "N" > ${out_dir}/bg_seqs.txt
else
    grep -v "N" $bgfile > ${out_dir}/bg_seqs.txt
fi;

# Ensure ability to write to directory and that everything is there
if [ ! -f ${out_dir}/fg_seqs.txt ]; then
    echo "Files could not be written to output directory"
    exit 1
fi
if [ ! -f ${out_dir}/bg_seqs.txt ]; then
    echo "Files could not be written to output directory"
    exit 1
fi

currdir=`pwd`
# Move into output directory
cd $out_dir

### SAVE ALL ARGUMENT VALUES IN FILE CALLED: PRIESSTESS_arguments.txt
echo "CALLED FROM: $currdir" > PRIESSTESS_arguments.txt
echo "fg $fgfile" >> PRIESSTESS_arguments.txt
echo "bg $bgfile" >> PRIESSTESS_arguments.txt
echo "o $out_dir" >> PRIESSTESS_arguments.txt
echo "f5 $flank5" >> PRIESSTESS_arguments.txt
echo "f3 $flank3" >> PRIESSTESS_arguments.txt
echo "t $temp" >> PRIESSTESS_arguments.txt
echo "alph $alphs" >> PRIESSTESS_arguments.txt
echo "N $N" >> PRIESSTESS_arguments.txt
echo "stremeP $streme_perc" >> PRIESSTESS_arguments.txt
echo "logregP $LR_perc" >> PRIESSTESS_arguments.txt
echo "testP $test_perc" >> PRIESSTESS_arguments.txt
echo "minw $min_width" >> PRIESSTESS_arguments.txt
echo "maxw $max_width" >> PRIESSTESS_arguments.txt
echo "maxAmotifs $max_motifs" >> PRIESSTESS_arguments.txt
echo "scoreN $N_score" >> PRIESSTESS_arguments.txt
echo "predLoss $predict_loss" >> PRIESSTESS_arguments.txt
echo "noCleanup $clean" >> PRIESSTESS_arguments.txt

# If not already present (-flanksIn):
# Add 5' flank to beginning of each sequence
# Add 3' flank to end of each sequence
if [[ $flanks_included == "FALSE" ]]; then
    for f in fg_seqs.txt bg_seqs.txt; do
        awk -v prefix="$flank5" -v suffix="$flank3" '{print prefix $0 suffix}' $f > tmp.tmp
    mv -f tmp.tmp $f
    done;
    # Get length of each flank + 1 for correct indexing
    # wc -c = length of flank + 1
    flank5len=`echo $flank5 | wc -c`
    flank3len=`echo $flank3 | wc -c`
else
    # Get length of each flank + 1 for correct indexing
    if [[ "$flank5" =~ ^[0-9][0-9]*$ ]]; then
        flank5len=$(( flank5 + 1 ))
    else
        flank5len=`echo $flank5 | wc -c`
    fi;
    if [[ "$flank3" =~ ^[0-9][0-9]*$ ]]; then
        flank3len=$(( flank3 + 1 ))
    else
        flank3len=`echo $flank3 | wc -c`
    fi;
fi;

# Fold the full probe sequences for foreground and background 
# and return files with all 7 probe annotations plus a "name"
# for each probe
# This file returns a file called ${prefix}_alphabet_annotations.tab
${libpath}/fold_and_annotate.sh fg_seqs.txt $libpath fg $temp $clean
${libpath}/fold_and_annotate.sh bg_seqs.txt $libpath bg $temp $clean

# Reduce alphabet annotations down to those requested by the user
# Identify which alphabets are needed and extract those columns
# Generate file annotation_alphabets_header.tab which defines the columns
# in the *_alphabet_annotations.tab files
echo "ID seq-4 seq-struct-8 seq-struct-16 seq-struct-28 struct-2 struct-4 struct-7" | tr ' ' '\t' > annotation_alphabets_header.tab
echo "1 2 3 4 5 6 7 8" | tr ' ' '\t' >> annotation_alphabets_header.tab
# Retrieve the column numbers for the alphabets the user wants
cols="1"
for a in `echo $alphs | tr ',' ' '`; do
    c=$(( a + 1 ))
    cols="${cols},${c}"
done
# Use the column numbers to extract the columns for the appropriate
# alphabets from annotation_alphabets_header.tab and 
# *_alphabet_annotations.tab files for downstream analysis
for f in annotation_alphabets_header.tab fg_alphabet_annotations.tab bg_alphabet_annotations.tab; do 
    cut -f $cols $f > tmp.tmp
    mv -f tmp.tmp $f
done
# Generate a folder for each of the alphabets remaining
for a in `cut -f 2- annotation_alphabets_header.tab | head -n 1`; do
    mkdir $a
done

# Extract the portion of the probe that is NOT in the 5' or 3'
# flank
# If 5' or 3' flanks are blank it will leave the files unchanged
for p in fg bg; do
    f=${p}_alphabet_annotations.tab
    no_flank="${p}_alphabet_annotations_no_flanks"
    # Each column must be managed individually
    numcols=`head -1 $f | tr '\t' '\n' | wc -l`
    topaste=''
    for i in `seq 2 $numcols`; do 
        cut -f $i $f | cut -c ${flank5len}- | rev | cut -c ${flank3len}- | rev > ${no_flank}_${i}_col.tmp
        topaste="${topaste} ${no_flank}_${i}_col.tmp"
    done
    # Paste together all the flank free columns
    cut -f 1 $f | paste - $topaste > ${no_flank}.tab
    # Clean up files
    # Remove redudant temporary files
    rm -f ${no_flank}_*_col.tmp
    # Swap names of the files and clean up uncessary files
    # unless requested otherwise
    if [[ $clean == "FALSE" ]]; then
        mv -f $f ${p}_alphabet_annotations_with_flanks.tab
    else
        rm -f fg_seqs.txt bg_seqs.txt
    fi
    mv -f ${no_flank}.tab $f
done

# Generate training and test sets
# Two sets for training - one to use for STREME and
# one to use for logistic regression
# If N was not provided, determine N
if [[ $N -lt 1000 ]]; then
    N=1000000000
    for f in fg_alphabet_annotations.tab bg_alphabet_annotations.tab; do
        n1=`cat $f | wc -l`
        if [[ $n1 -lt $n ]]; then
            n=$n1
        fi
    done
fi

# Calculate number of probes to extract for each set
num_STREME=$(( N * streme_perc / 100 ))
num_LR=$(( N * LR_perc / 100 ))
num_test=$(( N * test_perc / 100 ))

for prefix in fg bg; do 
    file_N=`cat ${prefix}_alphabet_annotations.tab | wc -l`
    # Shuffle probe indices (i.e. line numbers)
    seq 1 $file_N > nums.txt
    ${libpath}/utils/shuffle.pl < nums.txt > line_nums.txt

    # Apportion correct number of indices to each set 
    head -n $num_STREME line_nums.txt | sort -g > ${prefix}_STREME_numbers.txt
    tail -n $num_LR line_nums.txt | sort -g > ${prefix}_LR_numbers.txt
    tail -n $(( num_test + num_LR )) line_nums.txt | head -n $num_test | sort -g > ${prefix}_test_numbers.txt

    # Remove superfluous files
    rm -f nums.txt line_nums.txt

    # Get the names of each of the alphabets
    List=`cut -f 2- annotation_alphabets_header.tab | head -n 1`
    arr=($List)

    # Find number of alphabets used
    lenlist=`cut -f 2- annotation_alphabets_header.tab | head -1 | tr '\t' '\n' | wc -l`
    len=`expr $lenlist - 1`

    # Go through the alphabets and make dirs and extract the sets into the dirs
    for i in `seq 0 $len`; do
        class=${arr[$i]}
        colnum=`expr $i + 2`
        for t in "STREME" "LR" "test"; do
            ${libpath}/utils/extract_lines_from_file.sh ${prefix}_${t}_numbers.txt ${prefix}_alphabet_annotations.tab | cut -f 1,${colnum} | ${libpath}/utils/tab2fasta.pl > ${class}/${prefix}_${t}.fa
        done;
    done;
    # Remove files with line numbers
    rm -rf ${prefix}_*numbers.txt
done;

# -----------------------------------------------------------------------------#

#### STREME ####
# -----------------------------------------------------------------------------#
# For each alphabet used, call STREME to identify enriched
# motifs using the fg_STREME.fa and bg_STREME.fa files

for a in `cut -f 2- annotation_alphabets_header.tab | head -1 | tr '\t' ' '`; do
    cd $a
    echo "Identifying motifs with alphabet $a"
    # Call STREME with appropriate parameters, note that there is a 
    # 23 hour time cutoff so that each will never take more than 1 day
    # However, it is unlikely that it would unless there are millions 
    # of long probes
    streme -verbosity 1 -oc . -alph ${libpath}/alphabets/RNA_${a}_alphabet_MEME -p fg_STREME.fa -n bg_STREME.fa -pvt 0.01 --time 82800 -minw $min_width -maxw $max_width
    # Find number of resulting motifs
    n=`grep MOTIF streme.txt | wc -l`
    # The last three motifs never meet the pvalue cutoff
    n=$(( n - 3 ))

    if [ $n -gt 0 ]; then 
        # Bonferroni correction as recommended in the STREME paper
        cutoff=`echo "0.01 / $n " | bc -l`
        # New cutoff
        logcutoff=`python ${libpath}/utils/log2.py $cutoff`
        # Get the letters in the alphabet for PFM generation
        alphabet=`grep "?" streme.txt | head -n 1 | grep -o "[A-Za-z]*" | sed 's/./& /g'`
        # Go through each resulting motif, verify it meets cutoff
        # and create a file to hold the PFM
        # Only retain up to max_motifs (-maxAmotifs) PFMs
        # Add 1 to max_motifs for less than testing
        max_motifs=$(( max_motifs + 1 ))
        for i in `seq 1 $n`; do 
            # Get width and p-value of motif
            mwidth=`grep -A 1 "MOTIF ${i}-" streme.txt | grep -o "w=[ 0-9]*" | grep -o [0-9]`
            pval=`grep -A 1 "MOTIF ${i}-" streme.txt | grep -o "P=[ e.0-9-]*" | grep -o "[e\.0-9-]*"`
            # Get log pvalue for comparison to cutoff
            logpval=`python ${libpath}/utils/log2_scinot.py $pval`
            # If pvalue passes cutoff save motif
            if (( $(echo "$logcutoff > $logpval" |bc -l) )); then
                # If we have fewer that max_motifs
                if [ $i -lt $max_motifs ]; then 
                    # Get number of lines i.e. positions in motif
                    lines=$(( mwidth + 1 ))
                    # Get PFM from streme file and save it as PFM_i.txt
                    grep -A $lines "MOTIF ${i}-" streme.txt | tail -n $mwidth | sed 's/^ //' | sed "1i $alphabet" | tr ' ' '\t' | ${libpath}/utils/transpose_file.sh > PFM-${i}.txt
                fi;
            fi;
        done;
    fi;

    # If any PFMs, scan them on *_LR.fa and *_test.fa files
    if [ -f PFM-1.txt ]; then
        for f in fg_LR.fa bg_LR.fa fg_test.fa bg_test.fa; do
            python ${libpath}/PFM_scan.py -a $a -f $f -p PFM -n $N_score
        done;
    fi;
    cd ..
done;

# -----------------------------------------------------------------------------#

#### LOGISTIC REGRESSION ####
# -----------------------------------------------------------------------------#
# Combine scores for PFMs across all alphabets and train LR model
# Generate reduced model 

# Get scores for all PFMs for all models
topaste_fg=""
topaste_bg=""
# For each alphabet if there are PFMs
for a in `cut -f 2- annotation_alphabets_header.tab | head -1 | tr '\t' ' '`; do
    if [ -f ${a}/fg_LR_PFM_scan_sum_top_${N_score}.tab ]; then 
        # Get scores and the names of the PFMs
        fg_scores="${a}/fg_LR_PFM_scan_sum_top_${N_score}.tab"
        bg_scores="${a}/bg_LR_PFM_scan_sum_top_${N_score}.tab"
        # Add alphabet name to the start of each PFM (now feature) names
        cut -f 2- $fg_scores | head -n 1 | sed "s/^/${a}_/" | sed "s/\t/\t${a}_/g" > ${a}_fg_scores.tmp
        cut -f 2- $fg_scores | tail -n +2 >> ${a}_fg_scores.tmp
        cut -f 2- $bg_scores | tail -n +2 > ${a}_bg_scores.tmp
        # Preparation to paste all alphabet scores together
        topaste_fg="$topaste_fg ${a}_fg_scores.tmp"
        topaste_bg="$topaste_bg ${a}_bg_scores.tmp"
    fi;
done;

# Combine scores for all alphabets into one file for training
# Add class column (1 or 0) to differentiate fg and bg sets
paste $topaste_fg | head -n 1 | sed 's/^/class\t/' > LR_training_set.tab
paste $topaste_fg | sed 's/^/1\t/' | tail -n +2 >> LR_training_set.tab
paste $topaste_bg | sed 's/^/0\t/' >> LR_training_set.tab

rm -f *.tmp

# Train PRIESSTESS model
echo "Training PRIESSTESS model"
python ${libpath}/PRIESSTESS_logistic_regression.py LR_training_set.tab $predict_loss

# -----------------------------------------------------------------------------#

#### TEST HELDOUT ####
# -----------------------------------------------------------------------------#
# Get AUROC of PRIESSTESS model on heldout data

# Get scores for all PFMs for all alphabets from test files
topaste_fg=""
topaste_bg=""
# For each alphabet if there are PFMs
for a in `cut -f 2- annotation_alphabets_header.tab | head -1 | tr '\t' ' '`; do
    if [ -f ${a}/fg_test_PFM_scan_sum_top_${N_score}.tab ]; then
        # Get scores and the names of the PFMs
        fg_scores="${a}/fg_test_PFM_scan_sum_top_${N_score}.tab"
        bg_scores="${a}/bg_test_PFM_scan_sum_top_${N_score}.tab"
        # Add alphabet name to the start of each PFM (now feature) names
        cut -f 2- $fg_scores | head -n 1 | sed "s/^/${a}_/" | sed "s/\t/\t${a}_/g" > ${a}_fg_scores.tmp
        cut -f 2- $fg_scores | tail -n +2 >> ${a}_fg_scores.tmp
        cut -f 2- $bg_scores | tail -n +2 > ${a}_bg_scores.tmp
        # Preparation to paste all alphabet scores together
        topaste_fg="$topaste_fg ${a}_fg_scores.tmp"
        topaste_bg="$topaste_bg ${a}_bg_scores.tmp"
    fi;
done;

# Combine scores for all alphabets into one file for training
# Add class column (1 or 0) to differentiate fg and bg sets
paste $topaste_fg | head -n 1 | sed 's/^/class\t/' > heldout_data.tab
paste $topaste_fg | sed 's/^/1\t/' | tail -n +2 >> heldout_data.tab
paste $topaste_bg | sed 's/^/0\t/' >> heldout_data.tab

rm -f *.tmp

echo "Testing PRIESSTESS model on heldout data"
python ${libpath}/test_PRIESSTESS_model.py LR_training_set.tab heldout_data.tab PRIESSTESS_model.sav heldout 

echo "--------"
echo "PRIESSTESS model complete"
auroc=`cat test_PRIESSTESS_model_ON_heldout_auroc.tab`
echo "AUROC on heldout: $auroc"
echo "Model and results are in $out_dir"
echo ""
echo "FILES"
echo "Model: ${out_dir}/PRIESSTESS_model.sav"
echo "Model weights: ${out_dir}/PRIESSTESS_model_weights.tab"
echo "AUROC on heldout: ${out_dir}/test_PRIESSTESS_model_ON_heldout_auroc.tab"
echo "--------"
